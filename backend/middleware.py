from backend.logger import logger
from fastapi import Request
import time
import traceback


class CustomMiddleware:
    def __init__(self, logger):
        self.logger = logger

    def generate_middleware(self):
        async def custom_middleware(request: Request, call_next):
            """
            Custom middleware to log request and response details.

            This middleware function logs details about incoming requests, including method, URL, headers,
            query parameters, and request body. It then forwards the request to the next middleware or
            route handler and logs the response status code.

            Args:
                request (Request): The incoming request object.
                call_next (callable): The callback function to call the next middleware or route handler.

            Returns:
                Response: The response generated by the subsequent middleware or route handler.

            Raises:
                Exception: If an error occurs during request processing.

            Note:
                - This middleware is intended to be used as part of a FastAPI application pipeline.
                - It logs details about both successful and failed requests.
            """
            start_time = time.time()
            try:
                self.logger.info(f"Request received: {request.method} {request.url}")
                self.logger.info(f"Headers: {request.headers}")
                body = await request.body()
                self.logger.info(f"Request Body: {body.decode()}")

                response = await call_next(request)

                process_time = time.time() - start_time
                self.logger.info(
                    f"Response: {response.status_code}, Latency: {process_time:.2f} seconds"
                )

                return response
            except Exception as e:
                self.logger.error(f"Error processing request: {traceback.format_exc()}")
                raise Exception(repr(e))

        return custom_middleware


custom_middleware = CustomMiddleware(logger).generate_middleware()
